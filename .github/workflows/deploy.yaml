name: Deploy Django App to AWS (Dev)

on:
  push:
    branches:
      - main

    paths:
      - '**'  # Trigger deployment for changes in any file in the current repository
      - '../../RepoA/**'  # Trigger deployment if files in RepoA are changed
      - '../../RepoB/**'  # Trigger deployment if files in RepoB are changed
env:
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Export database credentials
      run: |
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations
      run: |
        export PYTHONPATH=$PYTHONPATH:/home/runner/work/MainRepo/MainRepo/Repo-A:/home/runner/work/MainRepo/MainRepo/Repo-B
        python manage.py check
        python manage.py makemigrations add_users delete_users
        python manage.py migrate

    - name: Add SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
          set -e
        
          cd /home/ubuntu/MainRepo
        
          # Ensure MainRepo is up to date
          git reset --hard
          git pull origin main
        
          # Clone or update Repo-A
          if [ -d "Repo-A" ]; then
              cd Repo-A
              git reset --hard
              git pull origin main
              cd ..
          else
              git clone git@github.com:<your-username>/Repo-A.git
          fi
        
          # Clone or update Repo-B
          if [ -d "Repo-B" ]; then
              cd Repo-B
              git reset --hard
              git pull origin main
              cd ..
          else
              git clone git@github.com:<your-username>/Repo-B.git
          fi
        
          # Activate virtual environment
          source venv/bin/activate
        
          # Install dependencies
          pip install -r requirements.txt
        
          # Run migrations
          python manage.py makemigrations add_users delete_users
          python manage.py migrate
        
          # Restart Gunicorn
          sudo systemctl restart gunicorn
        
          # Restart Nginx
          sudo systemctl restart nginx
        EOF
