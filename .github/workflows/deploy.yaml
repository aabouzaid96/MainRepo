name: Deploy Django App to AWS (Dev)

on:
  push:
    branches:
      - main
    paths:
      - '**'  # Trigger deployment for changes in any file in the current repository
      - 'Repo-A/**'  # Trigger deployment if files in Repo-A are changed
      - 'Repo-B/**'  # Trigger deployment if files in Repo-B are changed

  workflow_dispatch:  # Add this trigger

env:
  ENVIRONMENT: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Export database credentials
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV

      - name: Debug Workspace
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la

      - name: Clone Repo A
        run: |
          git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/aabouzaid96/RepoA.git

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Build Repo A
        run: |
          cd RepoA
          python setup.py sdist
          pip install ./dist/repoa-0.1.tar.gz
          cd ../

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: |
          python manage.py migrate

      # Step 6: Add SSH Key
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 7: Copy RepoA to EC2 Server
      - name: Copy RepoA to EC2 Server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r RepoA ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/MainRepo/RepoA 

#      # Step 8: Copy MainRepo to EC2 Server
#      - name: Copy MainRepo to EC2 Server
#        run: |
#          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r . ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/MainRepo

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
            set -e
  
            # Navigate to the project directory
            cd /home/ubuntu/MainRepo
  
            # Ensure the latest code is pulled
            git reset --hard  # Remove any local changes
            git pull origin main  # Pull the latest changes
  
            # Activate the virtual environment
            source venv/bin/activate
  
            # Install dependencies
            pip install -r requirements.txt
  
            # Run Django migrations
            python manage.py migrate
  
            # Restart Gunicorn to apply changes
            sudo systemctl restart gunicorn
  
            # Restart Nginx for static and media changes
            sudo systemctl restart nginx
          EOF

#    - name: Restart Gunicorn on EC2
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
#          sudo systemctl restart gunicorn
#        EOF
#
#    - name: Restart Nginx on EC2
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} << 'EOF'
#          sudo systemctl restart nginx
#        EOF